myy = data[,1]
myx = data.matrix(data[,-1])
##learn model
model = ada(myx,myy )
pred = predict(model,as.data.frame(myx))
##check prediiction
table(pred,myy)
nu = 10**seq(-4,0.5,0.2)
j=1
i=1
#### start CV
Niter = 100
kfold = 10
##1. change para
##para for randomforest:ntree
para = 10**seq(-4,0.5,0.2)
auc.res = matrix(NA,Niter,length(para))
testID = sample(1:n,round(n/kfold))
print(j)
print(para[i])
model = ada(myx,myy ,nu=para[i])
yhat = predict(model,myx[testID,],type = "prob")
yhat = predict(model,as.data.frame(myx[testID,]),type = "prob")
roc = roc(myy[testID], yhat[,1])
auc(roc)
auc.res[j,i] = auc(roc)
library(ada)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("cleandata.csv")[,-1]
myy = data[,1]
myx = data.matrix(data[,-1])
##learn model
model = ada(myx,myy )
pred = predict(model,as.data.frame(myx))
##check prediiction
table(pred,myy)
#### start CV
Niter = 100
kfold = 10
##1. change para
##para for randomforest:ntree
para = 10**seq(-4,0.5,0.2)
auc.res = matrix(NA,Niter,length(para))
for(j in 1:Niter){
testID = sample(1:n,round(n/kfold))
for(i in 1:length(para)){
print(j)
print(para[i])
##2. change modelling
model = ada(myx,myy ,nu=para[i])
yhat = predict(model,as.data.frame(myx[testID,]),type = "prob")
roc = roc(myy[testID], yhat[,1])
auc.res[j,i] = auc(roc)
}
}
auc.list = apply(auc.res,2,mean)
bestpara = para[which.max(auc.list)]
plot(para,auc.list)
rf_best_model = ada(myx,myy,nu = bestpara)
dput(para,"2-ada.para.r")
dput(auc.res,"2-au.res.ada.r")
dput(rf_best_model,"2-ada_best_model.r")
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("cleandata.csv")[,-1]
myy = data[,1]
myx = data.matrix(data[,-1])
n =dim(myx)[1]
p =dim(myx)[2]
rm(list=ls())
library(nnet)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("cleandata.csv")[,-1]
myy = data[,1]
myx = data.matrix(data[,-1])
n =dim(myx)[1]
p =dim(myx)[2]
model = nnet(myx,myy, size = 6,decay = 0.5 )
rm(list=ls())
library(nnet)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("cleandata.csv")[,-1]
myy = data[,1]
myx = data.matrix(data[,-1])
n =dim(myx)[1]
p =dim(myx)[2]
model = nnet(myx,myy, size = 6,decay = 0.5 )
myx
myy
names(myy)
rm(list=ls())
library(nnet)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("cleandata.csv")[,-1]
myy = data[,1,drop=F]
myx = data.matrix(data[,-1])
n =dim(myx)[1]
p =dim(myx)[2]
names(myy)
model = nnet(ANGLE.CLOSURE~.,data = data, size = 6,decay = 0.5 )
pred = predict(model,as.data.frame(myx))
##check prediiction
table(pred,myy)
pred
length(pred)
length(myy)
dim(myy)
rm(list=ls())
library(nnet)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("cleandata.csv")[,-1]
myy = data[,1,drop=F]
myx = data.matrix(data[,-1])
n =dim(myx)[1]
p =dim(myx)[2]
##learn model
model = nnet(ANGLE.CLOSURE~.,data = data, size = 6,decay = 0.5 )
pred = predict(model,as.data.frame(myx))
length(pred)
table(pred,myy)
pred = predict(model,as.data.frame(myx),type = "raw")
##check prediiction
table(pred,myy)
table(t(pred),myy)
pred
head(pred)
head(pred)
head(myy)
head(pred)
roc <âˆ’ roc(myy~yHat, data)
pred = predict(model,as.data.frame(myx),type = "raw")
class(pred)
class(myy)
table(pred,myy)
length(pred)
length(myy)
myy = as.matrix(data[,1,drop=F])
names(myy)
myy = data[,1,drop=F]
table(pred,as.matrix(myy))
model = randomForest(myx,myy,ntree  = 50, probability = T)
pred = predict(model,as.data.frame(myx),type = "raw")
table(pred,(myy))
model = randomForest(myx,myy,ntree  = 50)
pred = predict(model,as.data.frame(myx),type = "raw")
table(pred,(myy))
model = randomForest(myx,myy,ntree  = 50)
pred = predict(model,(myx),type = "raw")
table(pred,(myy))
setwd("/Users/huangge/Downloads")
data = read.csv("bilearndata.csv")
View(data)
data = t(data)
View(data)
data = data[,-1]
View(data)
setwd("/Users/huangge/Downloads")
data = read.csv("bilearndata.csv")
data = t(data)
View(data)
data[,1]
View(data)
data[1,1]
View(data)
setwd("/Users/huangge/Downloads")
data = read.csv("bilearndata.csv")
data = t(data)
View(data)
data[1,1]
View(data)
n = dim(data)[1]
p = dim(data)[2]
View(data)
myy = data[,n]
myy
myy = data[,n]
myy = data[,n]
myy
n
setwd("/Users/huangge/Downloads")
data = read.csv("bilearndata.csv")
data = t(data)
n = dim(data)[1]
p = dim(data)[2]
n
dim(data)
n = dim(data)[1]
p = dim(data)[2]
myy = data[,p]
myy
View(data)
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(myx)[1]
p =dim(myx)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
setwd("/Users/huangge/Downloads")
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
myy
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
##start CV
Niter = 100
kfold = 10
##1.specify your parameter here
##cost
para = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
##gama
para2 = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
auc.res = array(NA,c(Niter,length(para),length(para2)))
for(j in 1:Niter){
testID = sample(1:n,round(n/kfold))
for(i in 1:length(para)){
for(k in 1:length(para2)){
print(j)
##modelling
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
yhat=attr(yhat,"probabilities")
roc = roc(myy[testID], yhat[,1])
auc.res[j,i,k] = auc(roc)
}
}
}
auc.list = apply(auc.res,c(2,3),mean)
dput(auc.res,"auc.res.svm.r")
levelplot(auc.list)
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
##start CV
Niter = 100
kfold = 10
##1.specify your parameter here
##cost
para = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
##gama
para2 = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
auc.res = array(NA,c(Niter,length(para),length(para2)))
j=1
i=1
testID = sample(1:n,round(n/kfold))
print(j)
##modelling
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
k =1
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
yhat=attr(yhat,"probabilities")
roc = roc(myy[testID], yhat[,1])
yhat
model = svr(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
yhat
yhat=attr(yhat,"probabilities")
yhay
yhat
roc = roc(myy[testID], yhat[,1])
yhat
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
yhat
roc = roc(myy[testID], yhat[,1])
yhat
myy[testID]
errorrate = function(pre, actual){
compare = pre==actual
return(1- sum(compare)/length(pre))
}
errorrate(yhat,myy[testID])
cbind(yhat,myy[testID])
errorrate(yhat,myy[testID])
errorrate = function(pre, actual){
compare = pre-actual
res = 0;
for(ii in 1:length(pre)){
res = res+compare[ii]*compare[ii]
}
return(res/length(pre) )
}
errorrate(yhat,myy[testID])
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
##start CV
Niter = 100
kfold = 10
##1.specify your parameter here
##cost
para = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
##gama
para2 = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
auc.res = array(NA,c(Niter,length(para),length(para2)))
for(j in 1:Niter){
testID = sample(1:n,round(n/kfold))
for(i in 1:length(para)){
for(k in 1:length(para2)){
print(j)
##modelling
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
auc.res[j,i,k]  =  errorrate(yhat,myy[testID])
}
}
}
auc.list = apply(auc.res,c(2,3),mean)
dput(auc.res,"auc.res.svm.r")
levelplot(auc.list)
rm(list=ls())
library(e1071)
library(pROC)
library(lattice)
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
##start CV
Niter = 100
kfold = 10
##1.specify your parameter here
##cost
para = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
##gama
para2 = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
auc.res = array(NA,c(Niter,length(para),length(para2)))
for(j in 1:Niter){
testID = sample(1:n,round(n/kfold))
for(i in 1:length(para)){
for(k in 1:length(para2)){
print(j)
##modelling
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
auc.res[j,i,k]  =  errorrate(yhat,myy[testID])
}
}
}
errorrate = function(pre, actual){
compare = pre-actual
res = 0;
for(ii in 1:length(pre)){
res = res+compare[ii]*compare[ii]
}
return(res/length(pre) )
}
library(e1071)
library(pROC)
library(lattice)
data = read.csv("bilearndata.csv")
data = t(data)
n =dim(data)[1]
p =dim(data)[2]
myy = data[,p]
myx = data.matrix(data[,-p])
##start CV
Niter = 100
kfold = 10
##1.specify your parameter here
##cost
para = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
##gama
para2 = sapply(seq(-1,0,0.5),function(xx){
return(10**(xx))
})
auc.res = array(NA,c(Niter,length(para),length(para2)))
for(j in 1:Niter){
testID = sample(1:n,round(n/kfold))
for(i in 1:length(para)){
for(k in 1:length(para2)){
print(j)
##modelling
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
auc.res[j,i,k]  =  errorrate(yhat,myy[testID])
}
}
}
auc.list = apply(auc.res,c(2,3),mean)
dput(auc.res,"auc.res.svm.r")
levelplot(auc.list)
bestpara = para[which.max(auc.list)]
bestpara
auc.list
i = 3, k = 1
i = 3
k = 1
para2[k]
para[i]
para[i]
para2[k]
model = svm(myx[-testID,],myy[-testID],cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx[testID,],probability = T)
model = svm(myx,myy,cost = para[i],gamma = para2[k], probability = T)
yhat = predict(model,myx,probability = T)
cbind(myy,yhat)
model = svm(myx,myy,cost = 1,gamma = 0.1, probability = T)
yhat = predict(model,myx,probability = T)
cbind(myy,yhat)
?svm()
plot(1:length(myy),myy )
setwd("/Users/huangge/GoogleCloudDrive/6740/hw3/workspace")
rm(list=ls())
library(nnet)
library(pROC)
library(lattice)
data = read.csv("cleandata.csv")[,-1]
myy = data[,1,drop=F]
myx = data.matrix(data[,-1])
n =dim(myx)[1]
p =dim(myx)[2]
model = nnet(ANGLE.CLOSURE~.,data = data, size = 6,decay = 0.5 )
pred = predict(model,as.data.frame(myx),type = "raw")
table(pred,(myy))
roc(myy~pred,data)
table(pred,(myy))
table(as.numeric(pred),(myy))
length(as.numeric(pred))
length(myy)
length((pred))
table((pred),as.numeric(myy))
table((pred),as.array(myy))
pred
roc(data[,1]~pred,data)
pred = predict(model,data,type = "raw")
pred
roc(data[,1]~pred,data)
data.tr = data
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
model <- nnet(y~., data=data.tr[-data.index,], size=s, decay=d)
model <- nnet(ANGLE.CLOSURE~., data=data.tr[-data.index,], size=s, decay=d)
model <- nnet(ANGLE.CLOSURE~., data=data.tr[-data.index,], size=6, decay=0.5)
yHat <- predict(model, data.tr[data.index,], type="raw")
roc <- roc(data.tr[data.index,1]~yHat, data.tr[data.index,])
